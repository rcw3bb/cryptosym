import java.nio.file.Files
import java.nio.file.Paths
import java.util.stream.Collectors
import java.util.stream.Stream
import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'org.openjfx.javafxplugin' version '0.0.13'
    id 'org.beryx.jlink' version '3.0.1'
}

apply from: '../group-version.gradle'
apply from: '../compatibility.gradle'
apply from: '../repositories.gradle'
apply from: '../common-dependencies.gradle'

dependencies {
    implementation project(path: ':cryptosym')
}

sourceSets {
    main {
        java {
            include "**/*.*"
        }
    }
}

application {
    mainModule = MAIN_MODULE
    mainClass = MAIN_CLASS
}

javafx {
    modules = [ 'javafx.controls', 'javafx.fxml' ]
    version = '21'
}

processResources {
    filesMatching('version.properties') {
        filter(ReplaceTokens, tokens: [
                'MAJOR_VERSION': MAJOR_VERSION
                ,'MINOR_VERSION': MINOR_VERSION
                ,'MAINTENANCE_VERSION': MAINTENANCE_VERSION
                ,'BUILD_VERSION': BUILD_VERSION
        ])
    }

    def resources = ['fxml', 'xml', 'png', 'properties']
    doFirst {
        sourceSets.main.output.asList().stream()
                .filter{___file -> ___file.path.matches(".*java.?main\$")}
                .findFirst().ifPresent { ___file ->

            def sourceDir = sourceSets.main.resources.sourceDirectories.asPath
            def destinationDir = ___file.path

            copy {
                from(sourceDir) {
                    exclude 'version.properties'
                    include resources.stream().map{ ___ext -> "**/*.${___ext}"}.collect(Collectors.toList())
                }
                into(destinationDir)
            }
        }
    }
    doLast {
        sourceSets.main.output.asList().stream()
                .filter{___file -> ___file.path.matches(".*resources.?main\$")}
                .findFirst().ifPresent { _1_file ->

            Stream<Path> stream = Files.walk(Paths.get(_1_file.path))
            try {
                def fileToDelete = stream.filter{___path ->
                    Files.isRegularFile(___path)
                            && resources.stream().any {___ext -> ___path.toFile().path.endsWith(___ext)}
                            && !___path.endsWith("version.properties")
                }.map{___path -> ___path.toFile()}
                            .collect(Collectors.toList()).toArray()

                if (fileToDelete.size()>0) {
                    delete {
                        delete fileToDelete
                    }
                }
            }
            finally {
                stream.close()
            }
        }
    }
}

jlink {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher{
        moduleName = "${MAIN_MODULE}"
        mainClassName = "${MAIN_CLASS}"
        noConsole = true
    }
    mergedModule {
        additive = true
        uses 'org.apache.logging.log4j.spi.Provider'
        uses 'org.apache.logging.log4j.message.ThreadDumpMessage.ThreadInfoFactory'
        uses 'org.apache.logging.log4j.util.PropertySource'
    }
    forceMerge('slf4j-api','log4j-api')
    imageName = "${project.name}-${version}"
}

task preparePackage(dependsOn: ['jlink']) {
    doLast {
        def projectName = "${project.name}-${version}"
        def batchFile = "${project.name}.bat"
        def batchPath = Paths.get(buildDir.absolutePath, projectName, batchFile).toFile()

        copy {
            from(Paths.get(buildDir.absolutePath, projectName, "bin"))
            into(Paths.get(buildDir.absolutePath, projectName))
            include batchFile
        }

        if (batchPath.exists()) {
            def pattern = "set DIR=\"%~dp0\""
            def replaceWith = "set DIR=\"%~dp0\\bin\""
            def content = batchPath.text
            def updatedContent = content.replace(pattern, replaceWith)
            if (!content.equals(updatedContent)) {
                batchPath.write(updatedContent)
            }
        }
    }
}

task packWin(dependsOn: ['preparePackage']) {
    doLast{
        def projectName = "${project.name}-${version}"
        def buildDirPath = layout.buildDirectory.asFile.get().absolutePath
        def jlinkOutputDir = Paths.get(buildDirPath, projectName)
        def outputFile =  Paths.get(buildDirPath, "pack", "${projectName}-win64.zip")

        ant.zip(destfile: outputFile) {
            fileset(dir: jlinkOutputDir)
        }
    }
}